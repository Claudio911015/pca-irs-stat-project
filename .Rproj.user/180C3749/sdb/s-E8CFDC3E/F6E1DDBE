{
    "contents" : "library(quantmod)\nlibrary(downloader)\nlibrary(ggplot2)\n\nterms = c(1, 2, 3, 4, 5, 7, 10, 30)\nfor (term in terms) {\n  getSymbols(paste('DSWP', term, sep=''), src='FRED')\n}\n\nDSWP1 = DSWP1[!is.na(DSWP1)]\nDSWP2 = DSWP2[!is.na(DSWP2)]\nDSWP3 = DSWP3[!is.na(DSWP3)]\nDSWP4 = DSWP4[!is.na(DSWP4)]\nDSWP5 = DSWP5[!is.na(DSWP5)]\nDSWP7 = DSWP7[!is.na(DSWP7)]\nDSWP10 = DSWP10[!is.na(DSWP10)]\nDSWP30 = DSWP30[!is.na(DSWP30)]\n\n# 2-1, 3-1, 4-1, 5-1, 7-1, 10-2, 10-5, 30-10\ncurve2_1 = last(DSWP2 - DSWP1, 250)\ncurve3_1 = last(DSWP3 - DSWP1, 250)\ncurve4_1 = last(DSWP4 - DSWP1, 250)\ncurve5_1 = last(DSWP5 - DSWP1, 250)\ncurve7_1 = last(DSWP7 - DSWP1, 250)\ncurve10_2 = last(DSWP10 - DSWP2, 250)\ncurve10_5 = last(DSWP10 - DSWP5, 250)\ncurve30_10 = last(DSWP30 - DSWP10, 250)\n\npccurve2_1 = dailyReturn(curve2_1)\npccurve3_1 = dailyReturn(curve3_1)\npccurve4_1 = dailyReturn(curve4_1)\npccurve5_1 = dailyReturn(curve5_1)\npccurve7_1 = dailyReturn(curve7_1)\npccurve10_2 = dailyReturn(curve10_2)\npccurve10_5 = dailyReturn(curve10_5)\npccurve30_10 = dailyReturn(curve30_10)\n\nacfcurve2_1 = acf(curve2_1, plot=FALSE)\nacfcurve2_1_dataframe = with(acfcurve2_1, data.frame(lag, acf))\nq_curve2_1 = ggplot(data = acfcurve2_1_dataframe, mapping = aes(x = lag, y = acf)) + geom_hline(aes(yintercept = 0)) + geom_segment(mapping = aes(xend = lag, yend = 0)) + xlab(\"Lag\") + ylab(\"Correlation\") + ggtitle(\"Curve 2s1s Swap Rate\")\nq_curve2_1\n\nacfcurve3_1 = acf(curve3_1, plot=FALSE)\nacfcurve3_1_dataframe = with(acfcurve3_1, data.frame(lag, acf))\nq_curve3_1 = ggplot(data = acfcurve3_1_dataframe, mapping = aes(x = lag, y = acf)) + geom_hline(aes(yintercept = 0)) + geom_segment(mapping = aes(xend = lag, yend = 0)) + xlab(\"Lag\") + ylab(\"Correlation\") + ggtitle(\"Curve 3s1s Swap Rate\")\nq_curve3_1\n\nacfcurve4_1 = acf(curve4_1, plot=FALSE)\nacfcurve4_1_dataframe = with(acfcurve4_1, data.frame(lag, acf))\nq_curve4_1 = ggplot(data = acfcurve4_1_dataframe, mapping = aes(x = lag, y = acf)) + geom_hline(aes(yintercept = 0)) + geom_segment(mapping = aes(xend = lag, yend = 0)) + xlab(\"Lag\") + ylab(\"Correlation\") + ggtitle(\"Curve 4s1s Swap Rate\")\nq_curve4_1\n\nacfcurve5_1 = acf(curve5_1, plot=FALSE)\nacfcurve5_1_dataframe = with(acfcurve5_1, data.frame(lag, acf))\nq_curve5_1 = ggplot(data = acfcurve5_1_dataframe, mapping = aes(x = lag, y = acf)) + geom_hline(aes(yintercept = 0)) + geom_segment(mapping = aes(xend = lag, yend = 0)) + xlab(\"Lag\") + ylab(\"Correlation\") + ggtitle(\"Curve 5s1s Swap Rate\")\nq_curve5_1\n\nacfcurve7_1 = acf(curve7_1, plot=FALSE)\nacfcurve7_1_dataframe = with(acfcurve7_1, data.frame(lag, acf))\nq_curve7_1 = ggplot(data = acfcurve7_1_dataframe, mapping = aes(x = lag, y = acf)) + geom_hline(aes(yintercept = 0)) + geom_segment(mapping = aes(xend = lag, yend = 0)) + xlab(\"Lag\") + ylab(\"Correlation\") + ggtitle(\"Curve 7s1s Swap Rate\")\nq_curve7_1\n\nacfcurve10_2 = acf(curve10_2, plot=FALSE)\nacfcurve10_2_dataframe = with(acfcurve10_2, data.frame(lag, acf))\nq_curve10_2 = ggplot(data = acfcurve10_2_dataframe, mapping = aes(x = lag, y = acf)) + geom_hline(aes(yintercept = 0)) + geom_segment(mapping = aes(xend = lag, yend = 0)) + xlab(\"Lag\") + ylab(\"Correlation\") + ggtitle(\"Curve 10s2s Swap Rate\")\nq_curve10_2\n\nacfcurve10_5 = acf(curve10_5, plot=FALSE)\nacfcurve10_5_dataframe = with(acfcurve10_5, data.frame(lag, acf))\nq_curve10_5 = ggplot(data = acfcurve10_5_dataframe, mapping = aes(x = lag, y = acf)) + geom_hline(aes(yintercept = 0)) + geom_segment(mapping = aes(xend = lag, yend = 0)) + xlab(\"Lag\") + ylab(\"Correlation\") + ggtitle(\"Curve 10s5s Swap Rate\")\nq_curve10_5\n\nacfcurve30_10 = acf(curve30_10, plot=FALSE)\nacfcurve30_10_dataframe = with(acfcurve30_10, data.frame(lag, acf))\nq_curve30_10 = ggplot(data = acfcurve30_10_dataframe, mapping = aes(x = lag, y = acf)) + geom_hline(aes(yintercept = 0)) + geom_segment(mapping = aes(xend = lag, yend = 0)) + xlab(\"Lag\") + ylab(\"Correlation\") + ggtitle(\"Curve 30s10s Swap Rate\")\nq_curve30_10\n\nsource(\"multiplot.R\")\npdf(\"acf-curve.pdf\",width=10,height=5)\nmultiplot(q_curve2_1, q_curve3_1, q_curve4_1, q_curve5_1, q_curve7_1, q_curve10_2, q_curve10_5, q_curve30_10, cols=4)\ndev.off()\n\nacfpccurve2_1 = acf(pccurve2_1, plot=FALSE)\nacfpccurve2_1_dataframe = with(acfpccurve2_1, data.frame(lag, acf))\nq_pccurve2_1 = ggplot(data = acfpccurve2_1_dataframe, mapping = aes(x = lag, y = acf)) + geom_hline(aes(yintercept = 0)) + geom_segment(mapping = aes(xend = lag, yend = 0)) + xlab(\"Lag\") + ylab(\"Correlation\") + ggtitle(\"Curve 2s1s (% Change)\")\nq_pccurve2_1\n\nacfpccurve3_1 = acf(pccurve3_1, plot=FALSE)\nacfpccurve3_1_dataframe = with(acfpccurve3_1, data.frame(lag, acf))\nq_pccurve3_1 = ggplot(data = acfpccurve3_1_dataframe, mapping = aes(x = lag, y = acf)) + geom_hline(aes(yintercept = 0)) + geom_segment(mapping = aes(xend = lag, yend = 0)) + xlab(\"Lag\") + ylab(\"Correlation\") + ggtitle(\"Curve 3s1s (% Change)\")\nq_pccurve3_1\n\nacfpccurve4_1 = acf(pccurve4_1, plot=FALSE)\nacfpccurve4_1_dataframe = with(acfpccurve4_1, data.frame(lag, acf))\nq_pccurve4_1 = ggplot(data = acfpccurve4_1_dataframe, mapping = aes(x = lag, y = acf)) + geom_hline(aes(yintercept = 0)) + geom_segment(mapping = aes(xend = lag, yend = 0)) + xlab(\"Lag\") + ylab(\"Correlation\") + ggtitle(\"Curve 4s1s (% Change)\")\nq_pccurve4_1\n\nacfpccurve5_1 = acf(pccurve5_1, plot=FALSE)\nacfpccurve5_1_dataframe = with(acfpccurve5_1, data.frame(lag, acf))\nq_pccurve5_1 = ggplot(data = acfpccurve5_1_dataframe, mapping = aes(x = lag, y = acf)) + geom_hline(aes(yintercept = 0)) + geom_segment(mapping = aes(xend = lag, yend = 0)) + xlab(\"Lag\") + ylab(\"Correlation\") + ggtitle(\"Curve 5s1s (% Change)\")\nq_pccurve5_1\n\nacfpccurve7_1 = acf(pccurve7_1, plot=FALSE)\nacfpccurve7_1_dataframe = with(acfpccurve7_1, data.frame(lag, acf))\nq_pccurve7_1 = ggplot(data = acfpccurve7_1_dataframe, mapping = aes(x = lag, y = acf)) + geom_hline(aes(yintercept = 0)) + geom_segment(mapping = aes(xend = lag, yend = 0)) + xlab(\"Lag\") + ylab(\"Correlation\") + ggtitle(\"Curve 7s1s (% Change)\")\nq_pccurve7_1\n\nacfpccurve10_2 = acf(pccurve10_2, plot=FALSE)\nacfpccurve10_2_dataframe = with(acfpccurve10_2, data.frame(lag, acf))\nq_pccurve10_2 = ggplot(data = acfpccurve10_2_dataframe, mapping = aes(x = lag, y = acf)) + geom_hline(aes(yintercept = 0)) + geom_segment(mapping = aes(xend = lag, yend = 0)) + xlab(\"Lag\") + ylab(\"Correlation\") + ggtitle(\"Curve 10s2s (% Change)\")\nq_pccurve10_2\n\nacfpccurve10_5 = acf(pccurve10_5, plot=FALSE)\nacfpccurve10_5_dataframe = with(acfpccurve10_5, data.frame(lag, acf))\nq_pccurve10_5 = ggplot(data = acfpccurve10_5_dataframe, mapping = aes(x = lag, y = acf)) + geom_hline(aes(yintercept = 0)) + geom_segment(mapping = aes(xend = lag, yend = 0)) + xlab(\"Lag\") + ylab(\"Correlation\") + ggtitle(\"Curve 10s5s (% Change)\")\nq_pccurve10_5\n\nacfpccurve30_10 = acf(pccurve30_10, plot=FALSE)\nacfpccurve30_10_dataframe = with(acfpccurve30_10, data.frame(lag, acf))\nq_pccurve30_10 = ggplot(data = acfpccurve30_10_dataframe, mapping = aes(x = lag, y = acf)) + geom_hline(aes(yintercept = 0)) + geom_segment(mapping = aes(xend = lag, yend = 0)) + xlab(\"Lag\") + ylab(\"Correlation\") + ggtitle(\"Curve 30s10s (% Change)\")\nq_pccurve30_10\n\npdf(\"acf-curve-returns.pdf\",width=10,height=5)\nmultiplot(q_pccurve2_1, q_pccurve3_1, q_pccurve4_1, q_pccurve5_1, q_pccurve7_1, q_pccurve10_2, q_pccurve10_5, q_pccurve30_10, cols=4)\ndev.off()\n\nrates = cbind(curve2_1, curve3_1, curve4_1, curve5_1, curve7_1, curve10_2, curve10_5, curve30_10)\ncolnames(rates) = c('curve2y1y', 'curve3y1y', 'curve4y1y', 'curve5y1y', 'curve7y1y', 'curve10y2y', 'curve10y5y', 'curve30y10y')\n\npc_rates = cbind(pccurve2_1, pccurve3_1, pccurve4_1, pccurve5_1, pccurve7_1, pccurve10_2, pccurve10_5, pccurve30_10)\ncolnames(pc_rates) = c('curve2y1y', 'curve3y1y', 'curve4y1y', 'curve5y1y', 'curve7y1y', 'curve10y2y', 'curve10y5y', 'curve30y10y')\n\nlibrary(ggplot2)\nlibrary(reshape)\ndataframe = data.frame(index(rates), rates)\ncolnames(dataframe) = c('date', 'curve2y1y', 'curve3y1y', 'curve4y1y', 'curve5y1y', 'curve7y1y', 'curve10y2y', 'curve10y5y', 'curve30y10y')\nmelted = melt(dataframe, id.vars='date')\nplot = ggplot(data=melted, aes(x=as.Date(date), y=value, color=variable)) + geom_line() + xlab('Curve Rates') + ylab('Date')\npdf(\"descriptive-curve-rates.pdf\",width=10,height=5)\nplot\ndev.off()\n\ndataframe = data.frame(index(pc_rates), pc_rates)\ncolnames(dataframe) = c('date', 'curve2y1y', 'curve3y1y', 'curve4y1y', 'curve5y1y', 'curve7y1y', 'curve10y2y', 'curve10y5y', 'curve30y10y')\nmelted = melt(dataframe, id.vars='date')\nplot = ggplot(data=melted, aes(x=as.Date(date), y=value, color=variable)) + geom_line() + xlab('Curve Rates') + ylab('Date')\npdf(\"descriptive-curve-rates-returns.pdf\",width=10,height=5)\nplot\ndev.off()\n\npcadata = pc_rates\nfit = princomp(pcadata, cor=FALSE, scores=TRUE)\n\ncovariance_matrix = cor(pcadata)\nrequire(corrplot)\npdf(\"corrplot-curve-returns.pdf\", width=5, height=5)\ncorrplot(covariance_matrix, method='shade', type='full', shade.col=NA, tl.col='black')\ndev.off()\n\nlibrary(ggbiplot)\npdf(\"biplot-curve-returns.pdf\", width=5, height=5)\nggbiplot(fit, obs.scale=1, var.scale=1)\ndev.off()\npdf(\"screeplot-curve-returns.pdf\", width=5, height=5)\nggscreeplot(fit)\ndev.off()\n\nscores = fit$scores\nscores_dataframe = data.frame(index(pc_rates), scores)\ncolnames(scores_dataframe) = c('date', 'pc1', 'pc2', 'pc3', 'pc4', 'pc5', 'pc6', 'pc7', 'pc8')\nkeeps = c('date', 'pc1', 'pc2', 'pc3')\nscores_dataframe = scores_dataframe[keeps]\nscores_melted = melt(scores_dataframe, id.vars='date')\nplot = ggplot(data=scores_melted, aes(x=as.Date(date), y=value, color=variable)) + geom_line() + xlab('Date') + ylab('Principal Component Score')\npdf(\"pca-scores-curve.pdf\", width=10, height=5)\nplot\ndev.off()\n\nloadings = with(fit, unclass(loadings))\nloadings\n\nloadings_dataframe = data.frame(index(loadings), loadings)\ncolnames(loadings_dataframe) = c('tenor', 'pc1', 'pc2', 'pc3', 'pc4', 'pc5', 'pc6', 'pc7', 'pc8')\nkeeps = c('tenor', 'pc1', 'pc2', 'pc3')\nloadings_dataframe = loadings_dataframe[keeps]\nloadings_melted = melt(loadings_dataframe, id.vars='tenor')\nplot = ggplot() + geom_line(data=loadings_melted, aes(x=tenor, y=value, color=variable)) + scale_x_discrete(labels=c('2y1y', '3y1y', '4y1y', '5y1y', '7y1y', '10y2y', '10y5y', '30y10y')) + xlab('Tenor') + ylab('Loading of First 3 PCs')\npdf(\"pca-loadings-curve.pdf\", width=10, height=5)\nplot\ndev.off()\n\n# first factor analysis\nsource('graphing_utility.R')\ny10 = diff(last(DSWP10, 251), lag=1)\ny10 = y10[!is.na(y10)]\nfirst_factor_10y = data.frame(rownames(scores), scores_dataframe$pc1, y10)\ncolnames(first_factor_10y) = c('date', 'pc1', 'y10')\nfirst_factor_10y$pc1 = -first_factor_10y$pc1\n\np1 = ggplot() + geom_line(data=first_factor_10y, aes(x=as.Date(date), y=pc1), colour=gg_color_hue(1)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + xlab('Date') + ylab('left/red: PC1\\nright/blue: 10y Yield')\np2 = ggplot() + geom_line(data=first_factor_10y, aes(x=as.Date(date), y=y10), colour=gg_color_hue(2)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(panel.background = element_rect(fill = NA))\ng = stack_plot(p1, p2)\npdf(\"verify-first.pdf\", width=10, height=5)\ngrid.draw(g)\ndev.off()\nfirst_factor_cor = cor(first_factor_10y$pc1, first_factor_10y$y10)\nfirst_factor_cor\n\n# second factor analysis\nsecond_factor_10y2y = data.frame(rownames(scores), scores_dataframe$pc2, (last(pccurve10_2, 250)))\ncolnames(second_factor_10y2y) = c('date', 'pc2', 'curve10y2y')\nsecond_factor_10y2y$pc2 = -second_factor_10y2y$pc2\n\np1 = ggplot() + geom_line(data=second_factor_10y2y, aes(x=as.Date(date), y=pc2), colour=gg_color_hue(1)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + xlab('Date') + ylab('left/red: PC2\\nright/blue: 10s2s Yield')\np2 = ggplot() + geom_line(data=second_factor_10y2y, aes(x=as.Date(date), y=curve10y2y), colour=gg_color_hue(2)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(panel.background = element_rect(fill = NA))\ng = stack_plot(p1, p2)\npdf(\"verify-second.pdf\", width=10, height=5)\ngrid.draw(g)\ndev.off()\nsecond_factor_cor = cor(second_factor_10y2y$pc2, second_factor_10y2y$curve10y2y)\nsecond_factor_cor\n\n# third factor analysis\nbutterfly2_10_30 = last((DSWP10 - DSWP5) - (DSWP30 - DSWP10), 250)\nbutterfly2_10_30 = dailyReturn(butterfly2_10_30)\nthird_factor_butterfly = data.frame(rownames(scores), scores_dataframe$pc3, butterfly2_10_30)\ncolnames(third_factor_butterfly) = c('date', 'pc3', 'butterfly2y10y30y')\nthird_factor_butterfly$pc3 = -third_factor_butterfly$pc3\n\np1 = ggplot() + geom_line(data=third_factor_butterfly, aes(x=as.Date(date), y=pc3), colour=gg_color_hue(1)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + xlab('Date') + ylab('left/red: PC3\\nright/blue: 2s10s30s Yield')\np2 = ggplot() + geom_line(data=third_factor_butterfly, aes(x=as.Date(date), y=butterfly2y10y30y), colour=gg_color_hue(2)) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(panel.background = element_rect(fill = NA))\ng = stack_plot(p1, p2)\npdf(\"verify-third.pdf\", width=10, height=5)\ngrid.draw(g)\ndev.off()\nthird_factor_cor = cor(third_factor_butterfly$pc3, third_factor_butterfly$butterfly2y10y30y)\nthird_factor_cor\n",
    "created" : 1450038627088.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2633318060",
    "id" : "F6E1DDBE",
    "lastKnownWriteTime" : 1450055578,
    "path" : "~/Dropbox/Dropbox/Linan/Columbia/Academics/2015 Fall/STAT W4290/project/curvetrade_returns.R",
    "project_path" : "curvetrade_returns.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}